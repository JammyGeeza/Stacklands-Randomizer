using System;
using System.Collections.Generic;
using System.Text;

namespace Stacklands_Randomizer_Mod
{
    public static class CustomQuestMapping
    {
        public static readonly List<Quest> Map = new()
        {
            /* ----- Additional Mainland Quests ----- */
            
            // Booster Packs
            new("buy_idea_booster")                   { OnSpecialAction = (string action) => action == $"buy_idea_pack"         , PossibleInPeacefulMode = true      , QuestGroup = QuestGroup.Starter},
            new("buy_farming_booster")                { OnSpecialAction = (string action) => action == $"buy_farming_pack"      , PossibleInPeacefulMode = true      , QuestGroup = QuestGroup.Starter},
            new("buy_cooking_booster")                { OnSpecialAction = (string action) => action == $"buy_cooking_pack"      , PossibleInPeacefulMode = true      , QuestGroup = QuestGroup.Starter},
            new("buy_idea2_booster")                  { OnSpecialAction = (string action) => action == $"buy_idea2_pack"        , PossibleInPeacefulMode = true      , QuestGroup = QuestGroup.Starter},
            new("buy_equipment_booster")              { OnSpecialAction = (string action) => action == $"buy_equipment_pack"    , PossibleInPeacefulMode = true      , QuestGroup = QuestGroup.Starter},
            new("buy_locations_booster")              { OnSpecialAction = (string action) => action == $"buy_locations_pack"    , PossibleInPeacefulMode = true      , QuestGroup = QuestGroup.Starter},
            new("buy_structures_booster")             { OnSpecialAction = (string action) => action == $"buy_structures_pack"   , PossibleInPeacefulMode = true      , QuestGroup = QuestGroup.Starter},
            
            new("buy_5_mainland_packs")               { OnSpecialAction = (string action) => CommonPatchMethods.MAINLAND_PACKS.Select(n => $"buy_{n}_pack").Contains(action) && CommonPatchMethods.GetTimesMainlandBoosterPacksBought() >= 5     , PossibleInPeacefulMode = true    , QuestGroup = QuestGroup.Starter   , RequiredCount = 5},
            new("buy_10_mainland_packs")              { OnSpecialAction = (string action) => CommonPatchMethods.MAINLAND_PACKS.Select(n => $"buy_{n}_pack").Contains(action) && CommonPatchMethods.GetTimesMainlandBoosterPacksBought() >= 10    , PossibleInPeacefulMode = true    , QuestGroup = QuestGroup.Starter   , RequiredCount = 10},
            new("buy_25_mainland_packs")              { OnSpecialAction = (string action) => CommonPatchMethods.MAINLAND_PACKS.Select(n => $"buy_{n}_pack").Contains(action) && CommonPatchMethods.GetTimesMainlandBoosterPacksBought() >= 25    , PossibleInPeacefulMode = true    , QuestGroup = QuestGroup.Starter   , RequiredCount = 25},

            // Selling cards
            new("sell_5_cards")                       { OnSpecialAction = (string action) => action == "sell_card" && CommonPatchMethods.GetTimesCardsSold() >= 5   , PossibleInPeacefulMode = true     , QuestGroup = QuestGroup.Starter   , RequiredCount = 5 },
            new("sell_10_cards")                      { OnSpecialAction = (string action) => action == "sell_card" && CommonPatchMethods.GetTimesCardsSold() >= 10  , PossibleInPeacefulMode = true     , QuestGroup = QuestGroup.Starter   , RequiredCount = 10},
            new("sell_25_cards")                      { OnSpecialAction = (string action) => action == "sell_card" && CommonPatchMethods.GetTimesCardsSold() >= 25  , PossibleInPeacefulMode = true     , QuestGroup = QuestGroup.Starter   , RequiredCount = 25},

            // Villagers
            new("get_5_villagers")                    { OnCardCreate = (CardData card) => WorldManager.instance.GetCardCount<BaseVillager>() == 5                   , PossibleInPeacefulMode = true     , QuestGroup = QuestGroup.MainQuest     , RequiredCount = 5},
            new("get_7_villagers")                    { OnCardCreate = (CardData card) => WorldManager.instance.GetCardCount<BaseVillager>() == 7                   , PossibleInPeacefulMode = true     , QuestGroup = QuestGroup.MainQuest     , RequiredCount = 7},
            
            // Structures
            new("build_coin_chest")                   { OnActionComplete = (CardData card, string action) => card.Id == Cards.blueprint_coinchest && action == "finish_blueprint"       , PossibleInPeacefulMode = true     , QuestGroup = QuestGroup.Building},
            new("build_garden")                       { OnActionComplete = (CardData card, string action) => card.Id == Cards.blueprint_garden && action == "finish_blueprint"          , PossibleInPeacefulMode = true     , QuestGroup = QuestGroup.Building},
            new("build_hotpot")                       { OnActionComplete = (CardData card, string action) => card.Id == Cards.blueprint_hotpot && action == "finish_blueprint"          , PossibleInPeacefulMode = true     , QuestGroup = QuestGroup.Building},
            new("build_iron_mine")                    { OnActionComplete = (CardData card, string action) => card.Id == Cards.blueprint_mine && action == "finish_blueprint"            , PossibleInPeacefulMode = true     , QuestGroup = QuestGroup.Building},
            new("build_market")                       { OnActionComplete = (CardData card, string action) => card.Id == Cards.blueprint_market && action == "finish_blueprint"          , PossibleInPeacefulMode = true     , QuestGroup = QuestGroup.Building},
            new("build_resource_chest")               { OnActionComplete = (CardData card, string action) => card.Id == Cards.blueprint_resourcechest && action == "finish_blueprint"   , PossibleInPeacefulMode = true     , QuestGroup = QuestGroup.Building},
            new("build_sawmill")                      { OnActionComplete = (CardData card, string action) => card.Id == Cards.blueprint_sawmill && action == "finish_blueprint"         , PossibleInPeacefulMode = true     , QuestGroup = QuestGroup.Building},
            new("build_smelter")                      { OnActionComplete = (CardData card, string action) => card.Id == Cards.blueprint_smelting && action == "finish_blueprint"        , PossibleInPeacefulMode = true     , QuestGroup = QuestGroup.Building},
            new("build_stove")                        { OnActionComplete = (CardData card, string action) => card.Id == Cards.blueprint_stove && action == "finish_blueprint"           , PossibleInPeacefulMode = true     , QuestGroup = QuestGroup.Building},
            new("build_warehouse")                    { OnActionComplete = (CardData card, string action) => card.Id == Cards.blueprint_warehouse && action == "finish_blueprint"       , PossibleInPeacefulMode = true     , QuestGroup = QuestGroup.Building},
            
            // Equipment
            new("make_bone_spear")                    { OnActionComplete = (CardData card, string action) => card.Id == Cards.blueprint_bone_spear && action == "finish_blueprint"      , PossibleInPeacefulMode = true     , QuestGroup = QuestGroup.Equipment},
            new("make_boomerang")                     { OnActionComplete = (CardData card, string action) => card.Id == Cards.blueprint_boomerang && action == "finish_blueprint"       , PossibleInPeacefulMode = true     , QuestGroup = QuestGroup.Equipment},
            new("make_club")                          { OnActionComplete = (CardData card, string action) => card.Id == Cards.blueprint_club && action == "finish_blueprint"            , PossibleInPeacefulMode = true     , QuestGroup = QuestGroup.Equipment},
            new("make_chainmail_armor")               { OnActionComplete = (CardData card, string action) => card.Id == Cards.blueprint_chainmail_armor && action == "finish_blueprint" , PossibleInPeacefulMode = true     , QuestGroup = QuestGroup.Equipment},
            new("make_iron_shield")                   { OnActionComplete = (CardData card, string action) => card.Id == Cards.blueprint_iron_shield && action == "finish_blueprint"     , PossibleInPeacefulMode = true     , QuestGroup = QuestGroup.Equipment},
            new("make_magic_blade")                   { OnActionComplete = (CardData card, string action) => card.Id == Cards.blueprint_magic_blade && action == "finish_blueprint"     , PossibleInPeacefulMode = true     , QuestGroup = QuestGroup.Equipment},
            new("make_magic_ring")                    { OnActionComplete = (CardData card, string action) => card.Id == Cards.blueprint_magic_ring && action == "finish_blueprint"      , PossibleInPeacefulMode = true     , QuestGroup = QuestGroup.Equipment},
            new("make_magic_staff")                   { OnActionComplete = (CardData card, string action) => card.Id == Cards.blueprint_magic_staff && action == "finish_blueprint"     , PossibleInPeacefulMode = true     , QuestGroup = QuestGroup.Equipment},
            new("make_magic_tome")                    { OnActionComplete = (CardData card, string action) => card.Id == Cards.blueprint_magic_tome && action == "finish_blueprint"      , PossibleInPeacefulMode = true     , QuestGroup = QuestGroup.Equipment},
            new("make_magic_wand")                    { OnActionComplete = (CardData card, string action) => card.Id == Cards.blueprint_magic_wand && action == "finish_blueprint"      , PossibleInPeacefulMode = true     , QuestGroup = QuestGroup.Equipment},
            new("make_slingshot")                     { OnActionComplete = (CardData card, string action) => card.Id == Cards.blueprint_slingshot && action == "finish_blueprint"       , PossibleInPeacefulMode = true     , QuestGroup = QuestGroup.Equipment},
            new("make_spear")                         { OnActionComplete = (CardData card, string action) => card.Id == Cards.blueprint_woodenweapons && action == "finish_blueprint"   , PossibleInPeacefulMode = true     , QuestGroup = QuestGroup.Equipment},
            new("make_spiked_plank")                  { OnActionComplete = (CardData card, string action) => card.Id == Cards.blueprint_spiked_plank && action == "finish_blueprint"    , PossibleInPeacefulMode = true     , QuestGroup = QuestGroup.Equipment},
            new("make_sword")                         { OnActionComplete = (CardData card, string action) => card.Id == Cards.blueprint_ironweapons && action == "finish_blueprint"     , PossibleInPeacefulMode = true     , QuestGroup = QuestGroup.Equipment},
            new("make_throwing_stars")                { OnActionComplete = (CardData card, string action) => card.Id == Cards.blueprint_throwing_star && action == "finish_blueprint"   , PossibleInPeacefulMode = true     , QuestGroup = QuestGroup.Equipment},
            new("make_wooden_shield")                 { OnActionComplete = (CardData card, string action) => card.Id == Cards.blueprint_wooden_shield && action == "finish_blueprint"   , PossibleInPeacefulMode = true     , QuestGroup = QuestGroup.Equipment},
            
            // Cooking
            new("make_stew")                          { OnActionComplete = (CardData card, string action) => card.Id == Cards.blueprint_stew && action == "finish_blueprint"            , PossibleInPeacefulMode = true     , QuestGroup = QuestGroup.Cooking},
            new("make_fruit_salad")                   { OnActionComplete = (CardData card, string action) => card.Id == Cards.blueprint_fruitsalad && action == "finish_blueprint"      , PossibleInPeacefulMode = true     , QuestGroup = QuestGroup.Cooking},
            new("make_milkshake")                     { OnActionComplete = (CardData card, string action) => card.Id == Cards.blueprint_milkshake && action == "finish_blueprint"       , PossibleInPeacefulMode = true     , QuestGroup = QuestGroup.Cooking},

            // Resources
            new("have_10_bricks")                     { OnCardCreate = (CardData card) => WorldManager.instance.GetCardCount(Cards.brick) == 10     , PossibleInPeacefulMode = true , QuestGroup = QuestGroup.Resources     , RequiredCount = 10},
            new("have_10_flint")                      { OnCardCreate = (CardData card) => WorldManager.instance.GetCardCount(Cards.flint) == 10     , PossibleInPeacefulMode = true , QuestGroup = QuestGroup.Resources     , RequiredCount = 10},
            new("have_10_iron_bars")                  { OnCardCreate = (CardData card) => WorldManager.instance.GetCardCount(Cards.iron_bar) == 10  , PossibleInPeacefulMode = true , QuestGroup = QuestGroup.Resources     , RequiredCount = 10},
            new("have_10_iron_ore")                   { OnCardCreate = (CardData card) => WorldManager.instance.GetCardCount(Cards.iron_ore) == 10  , PossibleInPeacefulMode = true , QuestGroup = QuestGroup.Resources     , RequiredCount = 10},
            new("have_10_planks")                     { OnCardCreate = (CardData card) => WorldManager.instance.GetCardCount(Cards.plank) == 10     , PossibleInPeacefulMode = true , QuestGroup = QuestGroup.Resources     , RequiredCount = 10},
            new("have_10_sticks")                     { OnCardCreate = (CardData card) => WorldManager.instance.GetCardCount(Cards.stick) == 10     , PossibleInPeacefulMode = true , QuestGroup = QuestGroup.Resources     , RequiredCount = 10},

            // Exploration
            new("explore_catacombs")                  { OnActionComplete = (CardData card, string action) => card.Id == Cards.catacombs && action == "complete_harvest"     , PossibleInPeacefulMode = true , QuestGroup = QuestGroup.Exploration},
            new("explore_graveyard")                  { OnActionComplete = (CardData card, string action) => card.Id == Cards.graveyard && action == "complete_harvest"     , PossibleInPeacefulMode = true , QuestGroup = QuestGroup.Exploration},
            new("explore_old_village")                { OnActionComplete = (CardData card, string action) => card.Id == Cards.old_village && action == "complete_harvest"   , PossibleInPeacefulMode = true , QuestGroup = QuestGroup.Exploration},
            new("explore_plains")                     { OnActionComplete = (CardData card, string action) => card.Id == Cards.plains && action == "complete_harvest"        , PossibleInPeacefulMode = true , QuestGroup = QuestGroup.Exploration},

            /* ----- Additional Island Quests ----- */

            // TODO: Work out what the booster pack IDs are for Island (and also add them to ISLAND_PACKS

            // Booster Packs
            new("buy_x_booster")                      { OnSpecialAction = (string action) => action == $"buy_x_pack"        , PossibleInPeacefulMode = true     , QuestGroup = QuestGroup.Island_Beginnings},
            new("buy_xx_booster")                     { OnSpecialAction = (string action) => action == $"buy_xx_pack"       , PossibleInPeacefulMode = true     , QuestGroup = QuestGroup.Island_Beginnings},
            new("buy_xxx_booster")                    { OnSpecialAction = (string action) => action == $"buy_xxx_pack"      , PossibleInPeacefulMode = true     , QuestGroup = QuestGroup.Island_Beginnings},
            new("buy_xxxx_booster")                   { OnSpecialAction = (string action) => action == $"buy_xxxx_pack"     , PossibleInPeacefulMode = true     , QuestGroup = QuestGroup.Island_Beginnings},
            new("buy_xxxxx_booster")                  { OnSpecialAction = (string action) => action == $"buy_xxxxx_pack"    , PossibleInPeacefulMode = true     , QuestGroup = QuestGroup.Island_Beginnings},
            new("buy_xxxxxx_booster")                 { OnSpecialAction = (string action) => action == $"buy_xxxxxx_pack"   , PossibleInPeacefulMode = true     , QuestGroup = QuestGroup.Island_Beginnings},

            new("buy_5_island_packs")                 { OnSpecialAction = (string action) => CommonPatchMethods.ISLAND_PACKS.Select(n => $"buy_{n}_pack").Contains(action) && CommonPatchMethods.GetTimesIslandBoosterPacksBought() >= 5     , PossibleInPeacefulMode = true    , QuestGroup = QuestGroup.Island_Beginnings     , RequiredCount = 5 },
            new("buy_10_island_packs")                { OnSpecialAction = (string action) => CommonPatchMethods.ISLAND_PACKS.Select(n => $"buy_{n}_pack").Contains(action) && CommonPatchMethods.GetTimesIslandBoosterPacksBought() >= 10    , PossibleInPeacefulMode = true    , QuestGroup = QuestGroup.Island_Beginnings     , RequiredCount = 10},
            new("buy_25_island_packs")                { OnSpecialAction = (string action) => CommonPatchMethods.ISLAND_PACKS.Select(n => $"buy_{n}_pack").Contains(action) && CommonPatchMethods.GetTimesIslandBoosterPacksBought() >= 25    , PossibleInPeacefulMode = true    , QuestGroup = QuestGroup.Island_Beginnings     , RequiredCount = 25},

            // Selling cards
            new("have_30_shells")                     { OnCardCreate = (CardData card) => WorldManager.instance.GetShellCount(includeInChest: true) >= 30   , PossibleInPeacefulMode = true     , QuestGroup = QuestGroup.Island_Beginnings     , RequiredCount = 30},
            new("have_50_shells")                     { OnCardCreate = (CardData card) => WorldManager.instance.GetShellCount(includeInChest: true) >= 50   , PossibleInPeacefulMode = true     , QuestGroup = QuestGroup.Island_Beginnings     , RequiredCount = 50},

            // Cooking
            new("make_bottle_of_water")               { OnActionComplete = (CardData card, string action) => card.Id == Cards.blueprint_fill_bottle && action == "finish_blueprint"     , PossibleInPeacefulMode = true     , QuestGroup = QuestGroup.Island_Cooking},
            new("make_grilled_fish")                  { OnActionComplete = (CardData card, string action) => card.Id == Cards.blueprint_cooked_fish && action == "finish_blueprint"     , PossibleInPeacefulMode = true     , QuestGroup = QuestGroup.Island_Cooking},
            new("make_tamago_sushi")                  { OnActionComplete = (CardData card, string action) => card.Id == Cards.blueprint_tamago_sushi && action == "finish_blueprint"    , PossibleInPeacefulMode = true     , QuestGroup = QuestGroup.Island_Cooking},

            // Resources
            new("have_10_fabric")                     { OnCardCreate = (CardData card) => WorldManager.instance.GetCardCount(Cards.fabric) == 10    , PossibleInPeacefulMode = true , QuestGroup = QuestGroup.Island_Misc     , RequiredCount = 10 },
            new("have_10_glass")                      { OnCardCreate = (CardData card) => WorldManager.instance.GetCardCount(Cards.glass) == 10     , PossibleInPeacefulMode = true , QuestGroup = QuestGroup.Island_Misc     , RequiredCount = 10 },
            new("have_10_gold_bars")                  { OnCardCreate = (CardData card) => WorldManager.instance.GetCardCount(Cards.gold_bar) == 10  , PossibleInPeacefulMode = true , QuestGroup = QuestGroup.Island_Misc     , RequiredCount = 10 },
            new("have_10_gold_ore")                   { OnCardCreate = (CardData card) => WorldManager.instance.GetCardCount(Cards.gold_ore) == 10  , PossibleInPeacefulMode = true , QuestGroup = QuestGroup.Island_Misc     , RequiredCount = 10 },
            new("have_10_rope")                       { OnCardCreate = (CardData card) => WorldManager.instance.GetCardCount(Cards.rope) == 10      , PossibleInPeacefulMode = true , QuestGroup = QuestGroup.Island_Misc     , RequiredCount = 10 },
            new("have_10_sails")                      { OnCardCreate = (CardData card) => WorldManager.instance.GetCardCount(Cards.sail) == 10      , PossibleInPeacefulMode = true , QuestGroup = QuestGroup.Island_Misc     , RequiredCount = 10 },
            new("have_10_sandstone")                  { OnCardCreate = (CardData card) => WorldManager.instance.GetCardCount(Cards.sandstone) == 10 , PossibleInPeacefulMode = true , QuestGroup = QuestGroup.Island_Misc     , RequiredCount = 10 },

            // Equipment
            new("make_blunderbuss")                   { OnActionComplete = (CardData card, string action) => card.Id == Cards.blueprint_blunderbuss && action == "finish_blueprint"         , PossibleInPeacefulMode = true     , QuestGroup = QuestGroup.Island_Combat},
            new("make_bone_staff")                    { OnActionComplete = (CardData card, string action) => card.Id == Cards.blueprint_bone_staff && action == "finish_blueprint"          , PossibleInPeacefulMode = true     , QuestGroup = QuestGroup.Island_Combat},
            new("make_crossbow")                      { OnActionComplete = (CardData card, string action) => card.Id == Cards.blueprint_crossbow && action == "finish_blueprint"            , PossibleInPeacefulMode = true     , QuestGroup = QuestGroup.Island_Combat},
            new("make_golden_chestplate")             { OnActionComplete = (CardData card, string action) => card.Id == Cards.blueprint_gold_chestplate && action == "finish_blueprint"     , PossibleInPeacefulMode = true     , QuestGroup = QuestGroup.Island_Combat},
            new("make_mountain_amulet")               { OnActionComplete = (CardData card, string action) => card.Id == Cards.blueprint_amulet_of_mountain && action == "finish_blueprint"  , PossibleInPeacefulMode = true     , QuestGroup = QuestGroup.Island_Combat},
            new("make_wizard_robe")                   { OnActionComplete = (CardData card, string action) => card.Id == Cards.blueprint_wizard_robe && action == "finish_blueprint"         , PossibleInPeacefulMode = true     , QuestGroup = QuestGroup.Island_Combat},

            // Structures
            new("build_distillery")                   { OnActionComplete = (CardData card, string action) => card.Id == Cards.blueprint_distillery && action == "finish_blueprint"      , PossibleInPeacefulMode = true     , QuestGroup = QuestGroup.Island_Misc},
            new("build_frigate")                      { OnActionComplete = (CardData card, string action) => card.Id == Cards.blueprint_frigate && action == "finish_blueprint"         , PossibleInPeacefulMode = true     , QuestGroup = QuestGroup.Island_Misc},
            new("build_gold_mine")                    { OnActionComplete = (CardData card, string action) => card.Id == Cards.blueprint_gold_mine && action == "finish_blueprint"       , PossibleInPeacefulMode = true     , QuestGroup = QuestGroup.Island_Misc},
            new("build_lighthouse")                   { OnActionComplete = (CardData card, string action) => card.Id == Cards.blueprint_lighthouse && action == "finish_blueprint"      , PossibleInPeacefulMode = true     , QuestGroup = QuestGroup.Island_Misc},
            new("build_sand_quarry")                  { OnActionComplete = (CardData card, string action) => card.Id == Cards.blueprint_sand_quarry && action == "finish_blueprint"     , PossibleInPeacefulMode = true     , QuestGroup = QuestGroup.Island_Misc},
            new("build_shell_chest")                  { OnActionComplete = (CardData card, string action) => card.Id == Cards.blueprint_shell_chest && action == "finish_blueprint"     , PossibleInPeacefulMode = true     , QuestGroup = QuestGroup.Island_Misc},

            // Exploration
            new("explore_cave")                       { OnActionComplete = (CardData card, string action) => card.Id == Cards.cave && action == "complete_harvest"      , PossibleInPeacefulMode = true , QuestGroup = QuestGroup.Island_Misc },
            new("explore_jungle")                     { OnActionComplete = (CardData card, string action) => card.Id == Cards.jungle && action == "complete_harvest"    , PossibleInPeacefulMode = true , QuestGroup = QuestGroup.Island_Misc },


            /* ----- Mobsanity Quests ----- */

            new($"kill_{Cards.bear}")                 { OnSpecialAction = (string action) => action == $"{Cards.bear}_killed",               PossibleInPeacefulMode = false,      QuestGroup = EnumExtensionHandler.MobsanityQuestGroupEnum },
            new($"kill_{Cards.dark_elf}")             { OnSpecialAction = (string action) => action == $"{Cards.dark_elf}_killed",           PossibleInPeacefulMode = false,      QuestGroup = EnumExtensionHandler.MobsanityQuestGroupEnum },
            new($"kill_{Cards.elf}")                  { OnSpecialAction = (string action) => action == $"{Cards.elf}_killed",                PossibleInPeacefulMode = false,      QuestGroup = EnumExtensionHandler.MobsanityQuestGroupEnum },
            new($"kill_{Cards.elf_archer}")           { OnSpecialAction = (string action) => action == $"{Cards.elf_archer}_killed",         PossibleInPeacefulMode = false,      QuestGroup = EnumExtensionHandler.MobsanityQuestGroupEnum },
            new($"kill_{Cards.enchanted_shroom}")     { OnSpecialAction = (string action) => action == $"{Cards.enchanted_shroom}_killed",   PossibleInPeacefulMode = false,      QuestGroup = EnumExtensionHandler.MobsanityQuestGroupEnum },
            new($"kill_{Cards.ent}")                  { OnSpecialAction = (string action) => action == $"{Cards.ent}_killed",                PossibleInPeacefulMode = false,      QuestGroup = EnumExtensionHandler.MobsanityQuestGroupEnum },
            new($"kill_{Cards.feral_cat}")            { OnSpecialAction = (string action) => action == $"{Cards.feral_cat}_killed",          PossibleInPeacefulMode = false,      QuestGroup = EnumExtensionHandler.MobsanityQuestGroupEnum },
            new($"kill_{Cards.frog_man}")             { OnSpecialAction = (string action) => action == $"{Cards.frog_man}_killed",           PossibleInPeacefulMode = false,      QuestGroup = EnumExtensionHandler.MobsanityQuestGroupEnum },
            new($"kill_{Cards.ghost}")                { OnSpecialAction = (string action) => action == $"{Cards.ghost}_killed",              PossibleInPeacefulMode = false,      QuestGroup = EnumExtensionHandler.MobsanityQuestGroupEnum },
            new($"kill_{Cards.giant_rat}")            { OnSpecialAction = (string action) => action == $"{Cards.giant_rat}_killed",          PossibleInPeacefulMode = false,      QuestGroup = EnumExtensionHandler.MobsanityQuestGroupEnum },
            new($"kill_{Cards.giant_snail}")          { OnSpecialAction = (string action) => action == $"{Cards.giant_snail}_killed",        PossibleInPeacefulMode = false,      QuestGroup = EnumExtensionHandler.MobsanityQuestGroupEnum },
            new($"kill_{Cards.goblin}")               { OnSpecialAction = (string action) => action == $"{Cards.goblin}_killed",             PossibleInPeacefulMode = false,      QuestGroup = EnumExtensionHandler.MobsanityQuestGroupEnum },
            new($"kill_{Cards.goblin_archer}")        { OnSpecialAction = (string action) => action == $"{Cards.goblin_archer}_killed",      PossibleInPeacefulMode = false,      QuestGroup = EnumExtensionHandler.MobsanityQuestGroupEnum },
            new($"kill_{Cards.goblin_shaman}")        { OnSpecialAction = (string action) => action == $"{Cards.goblin_shaman}_killed",      PossibleInPeacefulMode = false,      QuestGroup = EnumExtensionHandler.MobsanityQuestGroupEnum },
            new($"kill_{Cards.merman}")               { OnSpecialAction = (string action) => action == $"{Cards.merman}_killed",             PossibleInPeacefulMode = false,      QuestGroup = EnumExtensionHandler.MobsanityQuestGroupEnum },
            new($"kill_{Cards.mimic}")                { OnSpecialAction = (string action) => action == $"{Cards.mimic}_killed",              PossibleInPeacefulMode = false,      QuestGroup = EnumExtensionHandler.MobsanityQuestGroupEnum },
            new($"kill_{Cards.mosquito}")             { OnSpecialAction = (string action) => action == $"{Cards.mosquito}_killed",           PossibleInPeacefulMode = false,      QuestGroup = EnumExtensionHandler.MobsanityQuestGroupEnum },
            new($"kill_{Cards.ogre}")                 { OnSpecialAction = (string action) => action == $"{Cards.ogre}_killed",               PossibleInPeacefulMode = false,      QuestGroup = EnumExtensionHandler.MobsanityQuestGroupEnum },
            new($"kill_{Cards.orc_wizard}")           { OnSpecialAction = (string action) => action == $"{Cards.orc_wizard}_killed",         PossibleInPeacefulMode = false,      QuestGroup = EnumExtensionHandler.MobsanityQuestGroupEnum },
            new($"kill_{Cards.slime}")                { OnSpecialAction = (string action) => action == $"{Cards.slime}_killed",              PossibleInPeacefulMode = false,      QuestGroup = EnumExtensionHandler.MobsanityQuestGroupEnum },
            new($"kill_{Cards.small_slime}")          { OnSpecialAction = (string action) => action == $"{Cards.small_slime}_killed",        PossibleInPeacefulMode = false,      QuestGroup = EnumExtensionHandler.MobsanityQuestGroupEnum },
            new($"kill_{Cards.snake}")                { OnSpecialAction = (string action) => action == $"{Cards.snake}_killed",              PossibleInPeacefulMode = false,      QuestGroup = EnumExtensionHandler.MobsanityQuestGroupEnum },
            new($"kill_{Cards.tiger}")                { OnSpecialAction = (string action) => action == $"{Cards.tiger}_killed",              PossibleInPeacefulMode = false,      QuestGroup = EnumExtensionHandler.MobsanityQuestGroupEnum },
            new($"kill_{Cards.wolf}")                 { OnSpecialAction = (string action) => action == $"{Cards.wolf}_killed",               PossibleInPeacefulMode = false,      QuestGroup = EnumExtensionHandler.MobsanityQuestGroupEnum },
            

            /* ----- Spendsanity Quests ----- */

            new("buy_1_ap_spendsanity_pack")    { OnSpecialAction = (string action) => action == $"buy_{ModBoosterPacks.spendsanity}_pack" && CommonPatchMethods.GetTimesBoosterPackBought(ModBoosterPacks.spendsanity) >= 1    , DescriptionTermOverride = ModTerms.SpendsanityQuestDescription     , PossibleInPeacefulMode = true      , QuestGroup = EnumExtensionHandler.SpendsanityQuestGroupEnum      , RequiredCount = 1 },
            new("buy_2_ap_spendsanity_pack")    { OnSpecialAction = (string action) => action == $"buy_{ModBoosterPacks.spendsanity}_pack" && CommonPatchMethods.GetTimesBoosterPackBought(ModBoosterPacks.spendsanity) >= 2    , DescriptionTermOverride = ModTerms.SpendsanityQuestDescription     , PossibleInPeacefulMode = true      , QuestGroup = EnumExtensionHandler.SpendsanityQuestGroupEnum      , RequiredCount = 2 },
            new("buy_3_ap_spendsanity_pack")    { OnSpecialAction = (string action) => action == $"buy_{ModBoosterPacks.spendsanity}_pack" && CommonPatchMethods.GetTimesBoosterPackBought(ModBoosterPacks.spendsanity) >= 3    , DescriptionTermOverride = ModTerms.SpendsanityQuestDescription     , PossibleInPeacefulMode = true      , QuestGroup = EnumExtensionHandler.SpendsanityQuestGroupEnum      , RequiredCount = 3 },
            new("buy_4_ap_spendsanity_pack")    { OnSpecialAction = (string action) => action == $"buy_{ModBoosterPacks.spendsanity}_pack" && CommonPatchMethods.GetTimesBoosterPackBought(ModBoosterPacks.spendsanity) >= 4    , DescriptionTermOverride = ModTerms.SpendsanityQuestDescription     , PossibleInPeacefulMode = true      , QuestGroup = EnumExtensionHandler.SpendsanityQuestGroupEnum      , RequiredCount = 4 },
            new("buy_5_ap_spendsanity_pack")    { OnSpecialAction = (string action) => action == $"buy_{ModBoosterPacks.spendsanity}_pack" && CommonPatchMethods.GetTimesBoosterPackBought(ModBoosterPacks.spendsanity) >= 5    , DescriptionTermOverride = ModTerms.SpendsanityQuestDescription     , PossibleInPeacefulMode = true      , QuestGroup = EnumExtensionHandler.SpendsanityQuestGroupEnum      , RequiredCount = 5 },
            new("buy_6_ap_spendsanity_pack")    { OnSpecialAction = (string action) => action == $"buy_{ModBoosterPacks.spendsanity}_pack" && CommonPatchMethods.GetTimesBoosterPackBought(ModBoosterPacks.spendsanity) >= 6    , DescriptionTermOverride = ModTerms.SpendsanityQuestDescription     , PossibleInPeacefulMode = true      , QuestGroup = EnumExtensionHandler.SpendsanityQuestGroupEnum      , RequiredCount = 6 },
            new("buy_7_ap_spendsanity_pack")    { OnSpecialAction = (string action) => action == $"buy_{ModBoosterPacks.spendsanity}_pack" && CommonPatchMethods.GetTimesBoosterPackBought(ModBoosterPacks.spendsanity) >= 7    , DescriptionTermOverride = ModTerms.SpendsanityQuestDescription     , PossibleInPeacefulMode = true      , QuestGroup = EnumExtensionHandler.SpendsanityQuestGroupEnum      , RequiredCount = 7 },
            new("buy_8_ap_spendsanity_pack")    { OnSpecialAction = (string action) => action == $"buy_{ModBoosterPacks.spendsanity}_pack" && CommonPatchMethods.GetTimesBoosterPackBought(ModBoosterPacks.spendsanity) >= 8    , DescriptionTermOverride = ModTerms.SpendsanityQuestDescription     , PossibleInPeacefulMode = true      , QuestGroup = EnumExtensionHandler.SpendsanityQuestGroupEnum      , RequiredCount = 8 },
            new("buy_9_ap_spendsanity_pack")    { OnSpecialAction = (string action) => action == $"buy_{ModBoosterPacks.spendsanity}_pack" && CommonPatchMethods.GetTimesBoosterPackBought(ModBoosterPacks.spendsanity) >= 9    , DescriptionTermOverride = ModTerms.SpendsanityQuestDescription     , PossibleInPeacefulMode = true      , QuestGroup = EnumExtensionHandler.SpendsanityQuestGroupEnum      , RequiredCount = 9 },
            new("buy_10_ap_spendsanity_pack")   { OnSpecialAction = (string action) => action == $"buy_{ModBoosterPacks.spendsanity}_pack" && CommonPatchMethods.GetTimesBoosterPackBought(ModBoosterPacks.spendsanity) >= 10   , DescriptionTermOverride = ModTerms.SpendsanityQuestDescription     , PossibleInPeacefulMode = true      , QuestGroup = EnumExtensionHandler.SpendsanityQuestGroupEnum      , RequiredCount = 10},
            new("buy_11_ap_spendsanity_pack")   { OnSpecialAction = (string action) => action == $"buy_{ModBoosterPacks.spendsanity}_pack" && CommonPatchMethods.GetTimesBoosterPackBought(ModBoosterPacks.spendsanity) >= 11   , DescriptionTermOverride = ModTerms.SpendsanityQuestDescription     , PossibleInPeacefulMode = true      , QuestGroup = EnumExtensionHandler.SpendsanityQuestGroupEnum      , RequiredCount = 11},
            new("buy_12_ap_spendsanity_pack")   { OnSpecialAction = (string action) => action == $"buy_{ModBoosterPacks.spendsanity}_pack" && CommonPatchMethods.GetTimesBoosterPackBought(ModBoosterPacks.spendsanity) >= 12   , DescriptionTermOverride = ModTerms.SpendsanityQuestDescription     , PossibleInPeacefulMode = true      , QuestGroup = EnumExtensionHandler.SpendsanityQuestGroupEnum      , RequiredCount = 12},
            new("buy_13_ap_spendsanity_pack")   { OnSpecialAction = (string action) => action == $"buy_{ModBoosterPacks.spendsanity}_pack" && CommonPatchMethods.GetTimesBoosterPackBought(ModBoosterPacks.spendsanity) >= 13   , DescriptionTermOverride = ModTerms.SpendsanityQuestDescription     , PossibleInPeacefulMode = true      , QuestGroup = EnumExtensionHandler.SpendsanityQuestGroupEnum      , RequiredCount = 13},
            new("buy_14_ap_spendsanity_pack")   { OnSpecialAction = (string action) => action == $"buy_{ModBoosterPacks.spendsanity}_pack" && CommonPatchMethods.GetTimesBoosterPackBought(ModBoosterPacks.spendsanity) >= 14   , DescriptionTermOverride = ModTerms.SpendsanityQuestDescription     , PossibleInPeacefulMode = true      , QuestGroup = EnumExtensionHandler.SpendsanityQuestGroupEnum      , RequiredCount = 14},
            new("buy_15_ap_spendsanity_pack")   { OnSpecialAction = (string action) => action == $"buy_{ModBoosterPacks.spendsanity}_pack" && CommonPatchMethods.GetTimesBoosterPackBought(ModBoosterPacks.spendsanity) >= 15   , DescriptionTermOverride = ModTerms.SpendsanityQuestDescription     , PossibleInPeacefulMode = true      , QuestGroup = EnumExtensionHandler.SpendsanityQuestGroupEnum      , RequiredCount = 15},
            new("buy_16_ap_spendsanity_pack")   { OnSpecialAction = (string action) => action == $"buy_{ModBoosterPacks.spendsanity}_pack" && CommonPatchMethods.GetTimesBoosterPackBought(ModBoosterPacks.spendsanity) >= 16   , DescriptionTermOverride = ModTerms.SpendsanityQuestDescription     , PossibleInPeacefulMode = true      , QuestGroup = EnumExtensionHandler.SpendsanityQuestGroupEnum      , RequiredCount = 16},
            new("buy_17_ap_spendsanity_pack")   { OnSpecialAction = (string action) => action == $"buy_{ModBoosterPacks.spendsanity}_pack" && CommonPatchMethods.GetTimesBoosterPackBought(ModBoosterPacks.spendsanity) >= 17   , DescriptionTermOverride = ModTerms.SpendsanityQuestDescription     , PossibleInPeacefulMode = true      , QuestGroup = EnumExtensionHandler.SpendsanityQuestGroupEnum      , RequiredCount = 17},
            new("buy_18_ap_spendsanity_pack")   { OnSpecialAction = (string action) => action == $"buy_{ModBoosterPacks.spendsanity}_pack" && CommonPatchMethods.GetTimesBoosterPackBought(ModBoosterPacks.spendsanity) >= 18   , DescriptionTermOverride = ModTerms.SpendsanityQuestDescription     , PossibleInPeacefulMode = true      , QuestGroup = EnumExtensionHandler.SpendsanityQuestGroupEnum      , RequiredCount = 18},
            new("buy_19_ap_spendsanity_pack")   { OnSpecialAction = (string action) => action == $"buy_{ModBoosterPacks.spendsanity}_pack" && CommonPatchMethods.GetTimesBoosterPackBought(ModBoosterPacks.spendsanity) >= 19   , DescriptionTermOverride = ModTerms.SpendsanityQuestDescription     , PossibleInPeacefulMode = true      , QuestGroup = EnumExtensionHandler.SpendsanityQuestGroupEnum      , RequiredCount = 19},
            new("buy_20_ap_spendsanity_pack")   { OnSpecialAction = (string action) => action == $"buy_{ModBoosterPacks.spendsanity}_pack" && CommonPatchMethods.GetTimesBoosterPackBought(ModBoosterPacks.spendsanity) >= 20   , DescriptionTermOverride = ModTerms.SpendsanityQuestDescription     , PossibleInPeacefulMode = true      , QuestGroup = EnumExtensionHandler.SpendsanityQuestGroupEnum      , RequiredCount = 20},
            new("buy_21_ap_spendsanity_pack")   { OnSpecialAction = (string action) => action == $"buy_{ModBoosterPacks.spendsanity}_pack" && CommonPatchMethods.GetTimesBoosterPackBought(ModBoosterPacks.spendsanity) >= 21   , DescriptionTermOverride = ModTerms.SpendsanityQuestDescription     , PossibleInPeacefulMode = true      , QuestGroup = EnumExtensionHandler.SpendsanityQuestGroupEnum      , RequiredCount = 21},
            new("buy_22_ap_spendsanity_pack")   { OnSpecialAction = (string action) => action == $"buy_{ModBoosterPacks.spendsanity}_pack" && CommonPatchMethods.GetTimesBoosterPackBought(ModBoosterPacks.spendsanity) >= 22   , DescriptionTermOverride = ModTerms.SpendsanityQuestDescription     , PossibleInPeacefulMode = true      , QuestGroup = EnumExtensionHandler.SpendsanityQuestGroupEnum      , RequiredCount = 22},
            new("buy_23_ap_spendsanity_pack")   { OnSpecialAction = (string action) => action == $"buy_{ModBoosterPacks.spendsanity}_pack" && CommonPatchMethods.GetTimesBoosterPackBought(ModBoosterPacks.spendsanity) >= 23   , DescriptionTermOverride = ModTerms.SpendsanityQuestDescription     , PossibleInPeacefulMode = true      , QuestGroup = EnumExtensionHandler.SpendsanityQuestGroupEnum      , RequiredCount = 23},
            new("buy_24_ap_spendsanity_pack")   { OnSpecialAction = (string action) => action == $"buy_{ModBoosterPacks.spendsanity}_pack" && CommonPatchMethods.GetTimesBoosterPackBought(ModBoosterPacks.spendsanity) >= 24   , DescriptionTermOverride = ModTerms.SpendsanityQuestDescription     , PossibleInPeacefulMode = true      , QuestGroup = EnumExtensionHandler.SpendsanityQuestGroupEnum      , RequiredCount = 24},
            new("buy_25_ap_spendsanity_pack")   { OnSpecialAction = (string action) => action == $"buy_{ModBoosterPacks.spendsanity}_pack" && CommonPatchMethods.GetTimesBoosterPackBought(ModBoosterPacks.spendsanity) >= 25   , DescriptionTermOverride = ModTerms.SpendsanityQuestDescription     , PossibleInPeacefulMode = true      , QuestGroup = EnumExtensionHandler.SpendsanityQuestGroupEnum      , RequiredCount = 25},
        };
    }
}
